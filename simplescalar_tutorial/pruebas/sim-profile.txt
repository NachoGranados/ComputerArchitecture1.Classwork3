sim-profile: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

sim: command line: ./../simplesim-3.0/sim-profile test 

sim: simulation started @ Fri Apr 22 16:50:39 2022, options follow:

sim-profile: This simulator implements a functional simulator with
profiling support.  Run with the `-h' flag to see profiling options
available.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-all                    false # enable all profile options
-iclass                 false # enable instruction class profiling
-iprof                  false # enable instruction profiling
-brprof                 false # enable branch instruction profiling
-amprof                 false # enable address mode profiling
-segprof                false # enable load/store address segment profiling
-tsymprof               false # enable text symbol profiling
-taddrprof              false # enable text address profiling
-dsymprof               false # enable data symbol profiling
-internal               false # include compiler-internal symbols during symbol profiling
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)

sim: ** starting functional simulation **
q=4 (int)x=0 (int)y=-2147483648
z=-2147483648
z=0
z=-2147483648
z=-2147483648
l=6
l=36
*lp=216
z=Inf
q=4 x=0.0000000 (int)x=0 y=-8940453888.000000 (int)y=-2147483648
q = 16  x = -107611744.000000  y = -35761828659.450000

sim: ** simulation statistics **
sim_num_insn                  80304 # total number of instructions executed
sim_num_refs                  19906 # total number of loads and stores executed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate            80304.0000 # simulation speed (in insts/sec)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  80384 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12288 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   31 # total number of pages allocated
mem.page_mem                   124k # total size of memory pages allocated
mem.ptab_misses                  33 # total first level page table misses
mem.ptab_accesses            869648 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

